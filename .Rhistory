hate[i] = (dry[i+sstart-1]+moist[i+sstart-1])*0.72+40.6
}
#불쾌지수평균과 최고로 높은 불쾌지수 출력
hate <- subset(hate, hate>=0)
print(mean(hate))
print(max(hate))
#######################################################
#서울 혹은 부산의 데이터를 불러온다
data <- read.csv("assign/부산.csv", stringsAsFactors=T)
#건구,이슬점온도에 해당되는 데이터를 저장
dry <- data$'건구온도'
dry <- subset(dry, dry<100)
moist <- data$'이슬점온도'
moist <- subset(moist, moist<100)
#월 데이터 저장
month <- data$'월'
month <- subset(month, month>=0)
# 여름의 시작과 끝의 인덱스를 찾는다
for (i in 1:length(month)) {
if(month[i] == 6) {
sstart <- c(i)
break
}
}
for (i in 1:length(month)) {
if(month[i] == 9) {
send <- c(i-1)
break
}
}
n<-send-sstart
hate <- vector(length=n)
#계산식을 활용하여 여름의 불쾌지수 계산
for(i in 1:n){
hate[i] = (dry[i+sstart-1]+moist[i+sstart-1])*0.72+40.6
}
#불쾌지수평균과 최고로 높은 불쾌지수 출력
hate <- subset(hate, hate>=0)
print(mean(hate))
print(max(hate))
rules<-apriori(Groceries, parameter=list(supp=0.001, conf=0.8, minlen=2),
appearance = list(default="lhs",rhs="whole milk"),
control = list(verbose=F))
rules<-sort(rules, decreasing=TRUE,by="confidence")
inspect(rules[1:5])
install.packages("arules")
library("arules")
data(Groceries)
itemFrequencyPlot(Groceries, topN=20, support=0.01)
itemFrequencyPlot(Groceries, topN=20, type="absolute")
rules<-apriori(Groceries, parameter=list(supp=0.001, conf=0.8))
options(digits = 2)
inspect(rules[1:5])
rules<-apriori(Groceries, parameter=list(supp=0.001, conf=0.8, minlen=2),
appearance = list(default="lhs",rhs="whole milk"),
control = list(verbose=F))
rules<-sort(rules, decreasing=TRUE,by="confidence")
inspect(rules[1:5])
interest_rules<-subset(rules, items %in% c("butter", "pork"))
inspect(interest_rules)
install.packages("arulesViz")
install.packages("igraph")
library(arulesViz)
library(igraph)
plot(rules)
rules<-apriori(data=Groceries, parameter=list(supp=0.001,conf = 0.08, minlen=2), appearance = list(none="whole milk"), control = list(verbose=F))
plot(rules)
rules<-apriori(data=Groceries, parameter=list(supp=0.001,conf = 0.08, minlen=2), appearance = list(none="whole milk"), control = list(verbose=F))
rules<-sort(rules, decreasing=TRUE,by="confidence")
inspect(rules[1:5])
plot(rules)
rules<-apriori(Groceries, parameter=list(supp=0.001, conf=0.8, minlen=2),
appearance = list(default="lhs",rhs="whole milk"),
control = list(verbose=F))
rules<-sort(rules, decreasing=TRUE,by="confidence")
plot(rules)
plot(sort(rules, by="support")[1:10], method="grouped")
plot(sort(rules, by="support")[1:10], method="graph")
rules<-apriori(data=Groceries, parameter=list(supp=0.001,conf = 0.08, minlen=2),
appearance = list(none="whole milk"),
control = list(verbose=F))
rules<-sort(rules, decreasing=TRUE,by="confidence")
plot(rules)
plot(sort(rules, by="support")[1:10], method="grouped")
plot(sort(rules, by="support")[1:10], method="graph")
plot(sort(rules, by="support")[1:10], method="graph")
plot(sort(rules, by="support")[1:10], method="grouped")
plot(rules)
library(igraph)
employee <- read.csv("employee.csv", header=F)
goods <- read.csv("goods.csv", header=F)
items <- read.csv("items.csv", header=F)
location<- read.csv("location.csv", header=F)
receipts <- read.csv("receipts.csv", header=F)
names(employee) <- c("LastName", "FirstName", "HireDate", "FireDate", "Position", "Fulltime", "StoreNum", "EmpId")
names(items) <- c("ReceiptNumber", "Quantity",  "ItemID")
names(goods) <- c("ItemID", "Flavor", "Food", "Price", "Type")
names(location) <- c("City", "State", "Zip", "Street", "StoreNum")
names(receipts) <- c("ReceiptNumber", "SaleDate", "Weekend", "isCash", "EmpId", "StoreNum")
items <- read.csv("items.csv", header=F)
library(arulesViz)
library(MASS)
data("Cars93")
str(Cars93)
summary(Cars93)
res.lm <- lm(Price ~ Type + AirBags + Cylinders + Man.trans.avail, data=Cars93)
summary(res.lm)
newdata <- data.frame(Type='Large', AirBags='Driver only', Cylinders ='6',
Man.trans.avail='Yes')
predict.lm(res.lm, newdata)
str(Cars93)
summary(Cars93)
step <- stepAIC(res.lm, direction="both")
anova(step)
library(car)
str(mtcars)
fit <- lm(mpg~., data=mtars)
fit <- lm(mpg~., data=mtcars)
summary(fit)
vif(fit)
install.packages("faraway")
library(faraway)
data(orings)
str(orings)
res.glm <- glm(cbind(damage, 6-damage) ~ temp,
family=binomial, data=orings)
summary(res.glm)
plot(damage/6 ~ temp, xlim=c(25, 85), ylim=c(0, 1),
xlab="Temperature", ylab="Pr(damage)",
data=orings)
x <- seq(from=25, to=85, by=0.01)
beta <- res.glm$coefficients
lines(x, ilogit(beta[1]+beta[2]*x), col=2)
predict.glm(res.glm, newdata=data.frame(temp=31), type="response")
sqrt(6)
sqrt(64+25)
sqrt(109)
sqrt(130)
sqrt(109)
sqrt(68)
View(busandata)
a=c(3,5,11,13,14,3,4,8,6,6)
a
m=matrix(a,ncol=5)
m
a=c(3, 3, 5, 4, 11, 8, 13, 6, 14, 6)
a
m=matrix(a,ncol=5)
m
b=c(3,3,13,6)
mb=matrix(b,ncol=2)
ma
mb
a=c(3, 3, 5, 4, 11, 8, 13, 6, 14, 6)
b=c(3,3,13,6)
ma=matrix(a,ncol=5)
mb=matrix(b,ncol=2)
ma
mb
ma[1,1]
ma[1,2]
ma[1,5]
load("C:/Users/joohyeon/Desktop/강의자료/데이터마이닝/최종프로젝트/rDocs/.RData")
insta_n <- insta2
insta_n$follower.y <- insta_n$follower.y / max(insta_n$follower.y)
ind <-sample(2, nrow(insta_n), replace=TRUE, prob=c(0.7, 0.3))
insta_n.trainingdata <- insta_n[ind==1,]
insta_n.testdata <- insta_n[ind==2,]
insta_n.training.lm <- lm(likes.count ~ . , data=insta_n.trainingdata)
summary(insta_n.training.lm)
pr_like_n <- predict.lm(insta_n.training.lm, insta_n.testdata)
conp_n <- insta_n.testdata[, c(1:2)]
conp_n <- cbind(conp_n, pr_like_n)
conp_n[, 3] <- sapply(conp_n[, 3], as.integer)
View(conp_n)
setwd("C:/Users/joohyeon/Desktop/강의자료/데이터마이닝/최종프로젝트/rDocs")
instagram1 <- read.csv("instadata/original.csv", header=T)
realdata <- instagram1[, c(1, 4, 8, 9:97)]
realdata[, c(1, 4:92)] <- sapply(realdata[, c(1, 4:92)], as.character)
length(realdata)
length(realdata$media.id)
list_tag <- NULL
for(j in 1:length(realdata$media.id)){
for(i in 1:(length(realdata)-3)){
if(realdata[j, i+3] == "" || is.null(realdata[j, i+3])){
break
}
list_tag <- c(list_tag[1:length(list_tag)], realdata[j, i+3])
}
}
list_tag[sapply(list_tag, is.null)]<-NULL
u_list_tag <- unique(list_tag)
tag_data <- realdata
for(i in 1:length(u_list_tag)){
tag_data <- cbind(tag_data, 0)
names(tag_data)[92+i] <- u_list_tag[i]
}
tag_count <- c(0:0)
for(j in 1:length(tag_data$media.id)){
for(k in 1:89){
tag_name <- tag_data[j, 3+k]
if(tag_name == "" || is.null(tag_name)){
break
}
tag_data[j, tag_name] <- 1
if(is.na(tag_count[tag_name])) tag_count[tag_name] <-1
else tag_count[tag_name] <- tag_count[tag_name]+1
}
}
final_data <- tag_data[, c(1:3,93:12869)]
final_data1 <- na.omit(final_data)
write.csv(final_data, "instadata/data.csv")
tag_count[1]
tag_count[2]
tag_count <- NULL
for(j in 1:length(tag_data$media.id)){
for(k in 1:89){
tag_name <- tag_data[j, 3+k]
if(tag_name == "" || is.null(tag_name)){
break
}
tag_data[j, tag_name] <- 1
if(is.na(tag_count[tag_name])) tag_count[tag_name] <-1
else tag_count[tag_name] <- tag_count[tag_name]+1
}
}
tag_count[2]
tag_count <- c(0,0)
for(j in 1:length(tag_data$media.id)){
for(k in 1:89){
tag_name <- tag_data[j, 3+k]
if(tag_name == "" || is.null(tag_name)){
break
}
tag_data[j, tag_name] <- 1
if(is.na(tag_count[tag_name])) tag_count[tag_name] <-1
else tag_count[tag_name] <- tag_count[tag_name]+1
}
}
tag_count[2]
tag_count[1]
tag_count[0]
tag_count[1]
tag_count[2]
tag_count[3]
tag_count <- NULL
tag_count <- c(0:0)
for(j in 1:length(tag_data$media.id)){
for(k in 1:89){
tag_name <- tag_data[j, 3+k]
if(tag_name == "" || is.null(tag_name)){
break
}
tag_data[j, tag_name] <- 1
if(is.na(tag_count[tag_name])) tag_count[tag_name] <-1
else tag_count[tag_name] <- tag_count[tag_name]+1
}
}
attr(tag_count, "names", TRUE))
attr(tag_count, "names", TRUE)
tag_cnt <- c(0)
for(i in 2:length(tag_count)-1){
if(tag_count[i]>1){
tag_cnt <- c(tag_cnt[1:length(tag_cnt)], attr(tag_count, "names", TRUE)[i])
}
}
for(i in 2:length(tag_cnt)){
final_data[, tag_cnt[i]] <- NULL
}
write.csv(final_data, "instadata/data.csv")
final_data <- tag_data[, c(1:3,93:12869)]
View(final_data)
sum(final_data$커피)
final_data <- tag_data[, c(1:3,93:12869)]
final_data3 <- final_data[, c(tag_count>1)]
View(final_data3)
write.csv(final_data, "instadata/data.csv")
write.csv(final_data3, "instadata/data.csv")
View(final_data1)
View(final_data1)
final_data <- tag_data[, c(1:3,93:12869)]
final_data3 <- final_data[, c(tag_count>1)]
View(final_data3)
View(tag_data)
final_data3 <- final_data[, c(1, tag_count>1)]
final_data3 <-final_data[, 1]
final_data <- tag_data[, c(1:3,93:12869)]
final_data3 <- final_data[, c(tag_count>1)]
write.csv(final_data, "instadata/data.csv")
write.csv(final_data3, "instadata/data2.csv")
nonfollower <- read.csv("instadata/data.csv", header=T)
f <- read.csv("instadata/nonfollow.csv", header=T)
nonfollower[, 1] <- sapply(nonfollower[, 1], as.character)
f[, 3] <- sapply(f[, 3], as.character)
colnames(f)[3] <- "media.id"
perf <- merge(f, nonfollower, by='media.id', all='TRUE')
perf$follower.y[is.na(perf$follower.y)] <- perf$follower.x[is.na(perf$follower.y)]
perf$i.x <- NULL
perf$follower.x <- NULL
complete_data <- na.omit(perf)
insta <- complete_data
insta$media.id <-NULL
remove(complete_data)
remove(f)
remove(final_data1)
remove(final_data)
remove(final_data3)
remove(perf)
remove(tag_data)
remove(i)
remove(j)
remove(k)
remove(list_tag)
remove(tag_count)
remove(tag_cnt)
insta.lm <- lm(likes.count ~ follower.y , data=insta)
ind <-sample(2, nrow(insta), replace=TRUE, prob=c(0.7, 0.3))
insta.trainingdata <- insta[ind==1,]
insta.testdata <- insta[ind==2,]
insta.training.lm <- lm(likes.count ~ . , data=insta.trainingdata)
remove(insta.lm)
summary(insta.training.lm)
remove(u_list_tag)
co <- insta.training.lm$coefficients
con <- na.omit(co)
rm_tag_list <- c("likes.count")
for(i in 2:length(attr(con, "names", TRUE))){
rm_tag_list <- c(rm_tag_list[1:length(rm_tag_list)], attr(con, "names", TRUE)[i])
}
insta2 <- insta[, rm_tag_list]
ind <-sample(2, nrow(insta2), replace=TRUE, prob=c(0.7, 0.3))
insta.trainingdata <- insta2[ind==1,]
insta.testdata <- insta2[ind==2,]
insta.training.lm <- lm(likes.count ~ . , data=insta.trainingdata)
summary(insta.training.lm)
co
co[is.na(co)]<- NULL
co[1]
con <- na.omit(co)
rm_tag_list <- c("likes.count")
for(i in 2:length(attr(con, "names", TRUE))){
rm_tag_list <- c(rm_tag_list[1:length(rm_tag_list)], attr(con, "names", TRUE)[i])
}
insta2 <- insta[, rm_tag_list]
ind <-sample(2, nrow(insta2), replace=TRUE, prob=c(0.7, 0.3))
insta.trainingdata <- insta2[ind==1,]
insta.testdata <- insta2[ind==2,]
insta.training.lm <- lm(likes.count ~ . , data=insta.trainingdata)
summary(insta.training.lm)
pr_like <- predict.lm(insta.training.lm, insta.testdata)
conp <- insta2.testdata[, c(1:2)]
conp <- cbind(conp, pr_like)
conp[, 3] <- sapply(conp[, 3], as.integer)
conp <- insta.testdata[, c(1:2)]
conp <- cbind(conp, pr_like)
conp[, 3] <- sapply(conp[, 3], as.integer)
View(conp)
insta_n <- insta
insta_n$follower.y <- insta_n$follower.y / max(insta_n$follower.y)
ind <-sample(2, nrow(insta_n), replace=TRUE, prob=c(0.7, 0.3))
insta_n.trainingdata <- insta_n[ind==1,]
insta_n.testdata <- insta_n[ind==2,]
insta_n.training.lm <- lm(likes.count ~ . , data=insta_n.trainingdata)
insta_n <- insta2
insta_n$follower.y <- insta_n$follower.y / max(insta_n$follower.y)
View(insta_n)
ind <-sample(2, nrow(insta_n), replace=TRUE, prob=c(0.7, 0.3))
insta_n.trainingdata <- insta_n[ind==1,]
insta_n.testdata <- insta_n[ind==2,]
insta_n.training.lm <- lm(likes.count ~ . , data=insta_n.trainingdata)
summary(insta_n.training.lm)
pr_like <- predict.lm(insta_n.training.lm, insta_n.testdata)
conp <- insta_n.testdata[, c(1:2)]
conp <- cbind(conp, pr_like)
conp[, 3] <- sapply(conp[, 3], as.integer)
View(conp)
summary(insta_n.training.lm)
plot(insta_n.training.lm)
summary(insta_n.training.lm)
step <- stepAIC(insta_n.training.lm, direction="both")
instagram1 <- read.csv("instadata/original.csv", header=T)
realdata <- instagram1[, c(1, 4, 8, 9:97)]
realdata[, c(1, 4:92)] <- sapply(realdata[, c(1, 4:92)], as.character)
length(realdata)
length(realdata$media.id)
list_tag <- NULL
for(j in 1:length(realdata$media.id)){
for(i in 1:(length(realdata)-3)){
if(realdata[j, i+3] == "" || is.null(realdata[j, i+3])){
break
}
list_tag <- c(list_tag[1:length(list_tag)], realdata[j, i+3])
}
}
list_tag[sapply(list_tag, is.null)]<-NULL
u_list_tag <- unique(list_tag)
tag_data <- realdata
for(i in 1:length(u_list_tag)){
tag_data <- cbind(tag_data, 0)
names(tag_data)[92+i] <- u_list_tag[i]
}
for(j in 1:length(tag_data$media.id)){
for(k in 1:89){
tag_name <- tag_data[j, 3+k]
if(tag_name == "" || is.null(tag_name)){
break
}
tag_data[j, tag_name] <- 1
tag_count[tag_name] <- tag_count[tag_name]+1
}
}
final_data <- tag_data[, c(1:3,93:12869)]
for(j in 1:length(tag_data$media.id)){
for(k in 1:89){
tag_name <- tag_data[j, 3+k]
if(tag_name == "" || is.null(tag_name)){
break
}
tag_data[j, tag_name] <- 1
# tag_count[tag_name] <- tag_count[tag_name]+1
}
}
final_data <- tag_data[, c(1:3,93:12869)]
write.csv(final_data, "instadata/data2.csv")
makedata <- function(){
count <- 0
follower<-0
while(follower<1){
follower <- readline("enter your followers number: ")
follower <- ifelse(grepl("\\D",n),-1,as.integer(follower))
}
tags<-
tags["follower.y"] <- follower
while(count >= 0){
n <- readline("enter your hashtag: ")
#n <- ifelse(grepl("\\D",n),-1,as.character(n))
if(n==""){break}  # breaks when hit enter
tags[n] <- 1
}
return(tags)
}
datas<-makedata()
datas<-makedata()
makedata <- function(){
count <- 0
follower<-0
n<-0
while(follower<1){
follower <- readline("enter your followers number: ")
follower <- ifelse(grepl("\\D",n),-1,as.integer(follower))
}
tags<-
tags["follower.y"] <- follower
while(count >= 0){
n <- readline("enter your hashtag: ")
#n <- ifelse(grepl("\\D",n),-1,as.character(n))
if(n==""){break}  # breaks when hit enter
tags[n] <- 1
}
return(tags)
}
datas<-makedata()
makedata <- function(){
count <- 0
follower<-0
n<-0
tags<-c(0:0)
while(follower<1){
follower <- readline("enter your followers number: ")
follower <- ifelse(grepl("\\D",n),-1,as.integer(follower))
}
tags<-
tags["follower.y"] <- follower
while(count >= 0){
n <- readline("enter your hashtag: ")
#n <- ifelse(grepl("\\D",n),-1,as.character(n))
if(n==""){break}  # breaks when hit enter
tags[n] <- 1
}
return(tags)
}
datas<-makedata()
data.frame(tags)
data.frame(datas)
d <- data.frame(datas)
View(d)
datas<-makedata()
d <- data.frame(datas)
d <- data.frame(, datas)
t(d)
d <- t(d)
View(d)
nonfollower <- read.csv("instadata/data2.csv", header=T)
f <- read.csv("instadata/nonfollow.csv", header=T)
nonfollower[, 1] <- sapply(nonfollower[, 1], as.character)
f[, 3] <- sapply(f[, 3], as.character)
colnames(f)[3] <- "media.id"
perf <- merge(f, nonfollower, by='media.id', all='TRUE')
perf$follower.y[is.na(perf$follower.y)] <- perf$follower.x[is.na(perf$follower.y)]
perf$i.x <- NULL
perf$follower.x <- NULL
complete_data <- na.omit(perf)
insta <- complete_data
insta$media.id <-NULL
ind <-sample(2, nrow(insta), replace=TRUE, prob=c(0.7, 0.3))
insta.trainingdata <- insta[ind==1,]
insta.testdata <- insta[ind==2,]
insta.training.lm <- lm(likes.count ~ . , data=insta.trainingdata)
summary(insta.training.lm)
summary(insta.training.lm)
plot(insta.training.lm)
plot(insta.training.lm)
